name: AI Code Review (Latest Commit Only)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches: [main, test]
  push:
    branches: [test]

concurrency:
  group: ai-review-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Detect risky-path changes (works for opened/synchronize/reopened)
      - name: Paths filter
        id: pf
        if: github.event_name == 'pull_request' && github.event.action != 'labeled'
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            risky:
              - 'scripts/**/*.js'
              - 'supabase/functions/**/*.js'
              - 'migrations/**/*.sql'
              - '.github/workflows/**'
              - '.github/scripts/**'

      # Decide whether to run:
      # - If labeled ai:review -> run
      # - If not labeled -> run only when risky paths changed
      - name: Decide run
        id: gate
        run: |
          set -euo pipefail
          EVENT="${{ github.event_name }}"
          ACTION="${{ github.event.action || '' }}"
          LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          RISKY='${{ steps.pf.outputs.risky || '' }}'
          RUN="no"

          if [ "$EVENT" = "push" ]; then
            RUN="yes"
          elif [ "$EVENT" = "pull_request" ]; then
            if [ "$ACTION" = "labeled" ] && echo "$LABELS" | grep -q '"ai:review"'; then
              RUN="yes"
            elif [ "$ACTION" != "labeled" ] && [ "$RISKY" = "true" ]; then
              RUN="yes"
            fi
          fi
          echo "run=$RUN" >> $GITHUB_OUTPUT

      - name: Stop if gate closed
        if: steps.gate.outputs.run != 'yes'
        run: echo "::notice ::AI review skipped (no label and no risky path changes)."; exit 0

      # Guard secrets for forks (only for PRs without explicit label)
      - name: Guard secrets for forks
        if: github.event_name == 'pull_request'
        run: |
          FROM_FORK='${{ github.event.pull_request.head.repo.fork }}'
          HAS_LABEL=$(echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q '"ai:review"' && echo yes || echo no)
          if [ "$FROM_FORK" = "true" ] && [ "$HAS_LABEL" != "yes" ]; then
            echo "::notice ::Fork PR without ai:review label; skipping to protect secrets."
            exit 0
          fi

      - name: Compute diff
        id: diff
        run: |
          set -euo pipefail
          git diff HEAD^ HEAD > pr.diff || git diff --root HEAD > pr.diff
          if ! [ -s pr.diff ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "has_changes=true" >> $GITHUB_OUTPUT
          csplit -s -f chunk_ -b "%03d.diff" pr.diff '/^diff --git /' '{*}' || true
          [ -s chunk_000.diff ] || rm -f chunk_000.diff || true
          echo "chunks=$(ls -1 chunk_*.diff 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT

      - name: Size guard
        id: size
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          LINES=$(git diff --shortstat HEAD^ HEAD | awk '{print $(NF-1)}')
          echo "lines=${LINES:-0}" >> $GITHUB_OUTPUT

      - name: Skip tiny changes
        if: steps.size.outputs.lines != '' && fromJSON(steps.size.outputs.lines) < 5
        run: |
          echo "::notice ::Tiny change (${{ steps.size.outputs.lines }}) lines; skipping AI review."
          exit 0

      - name: Create prompt header
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          cat > prompt_header.txt <<'ENDPROMPT'
          Role: Senior Staff Engineer reviewer
          Focus: (1) Correctness & security (2) Performance (3) Code quality
          Constraints:
          - Cite filename:line ranges
          - Max 10 findings total, ≤3 per file
          - Return STRICT JSON with arrays: BLOCKERS and NON_BLOCKING
          - Each item: file, lines, type, why, patch
          - DO NOT include prose outside JSON
          Context: TrumpyTracker (Node.js, Supabase, vanilla JS, cost cap <$50/mo)
          Review ONLY this diff chunk. Return STRICT JSON.
          ENDPROMPT

      - name: Create minimal pr_context (optional)
        run: |
          echo "PR #${{ github.event.pull_request.number || '' }} - ${{ github.event.pull_request.title || '' }}" > pr_context.txt || true

      - name: Run AI review script
        if: steps.diff.outputs.has_changes == 'true' && steps.diff.outputs.chunks != '0'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_API_BASE: https://api.openai.com/v1
          LLM_MODEL: gpt-5
          MAX_CHUNK_BYTES: "60000"
        run: .github/scripts/ai_review.sh

      - name: Post PR comment
        if: steps.diff.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ ! -f review.md ]; then
            echo "::warning ::review.md not found, skipping PR comment"; exit 0; fi
          {
            echo; echo '---'
            echo "_[View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})_"
          } >> review.md
          gh pr comment ${{ github.event.pull_request.number }} --body-file review.md

      - name: Analyze findings and add labels
        if: steps.diff.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        id: findings
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          PR_NUM=${{ github.event.pull_request.number }}
          
          # Count findings
          BLOCKERS=$(grep -c "### 🚨 BLOCKERS" review.md 2>/dev/null || echo 0)
          SUGGESTIONS=$(grep -c "### ℹ️ NON-BLOCKING" review.md 2>/dev/null || echo 0)
          
          echo "blockers=$BLOCKERS" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS" >> $GITHUB_OUTPUT
          
          # Remove old AI labels
          gh pr edit $PR_NUM --remove-label "ai:blockers" 2>/dev/null || true
          gh pr edit $PR_NUM --remove-label "ai:suggestions" 2>/dev/null || true
          gh pr edit $PR_NUM --remove-label "ai:clean" 2>/dev/null || true
          
          # Add appropriate label
          if [ "$BLOCKERS" -gt 0 ]; then
            gh pr edit $PR_NUM --add-label "ai:blockers"
            echo "::warning ::Found $BLOCKERS blocker(s) - review required"
          elif [ "$SUGGESTIONS" -gt 0 ]; then
            gh pr edit $PR_NUM --add-label "ai:suggestions"
            echo "::notice ::Found $SUGGESTIONS suggestion(s) - optional improvements"
          else
            gh pr edit $PR_NUM --add-label "ai:clean"
            echo "::notice ::No issues found - AI review passed"
          fi

      - name: Fail on blockers (unless overridden)
        if: steps.findings.outputs.blockers != '' && fromJSON(steps.findings.outputs.blockers) > 0
        run: |
          LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          HAS_OVERRIDE=$(echo "$LABELS" | grep -q '"ai:override"' && echo yes || echo no)
          
          if [ "$HAS_OVERRIDE" = "yes" ]; then
            echo "::warning ::Blockers found but ai:override label present - allowing merge"
            exit 0
          else
            echo "::error ::AI review found ${{ steps.findings.outputs.blockers }} blocker(s)"
            echo "::error ::Please address blockers or add 'ai:override' label to bypass"
            exit 1
          fi

      - name: Remove ai:review label after review
        if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ai:review')
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh pr edit ${{ github.event.pull_request.number }} --remove-label "ai:review"

      - name: Show review
        if: always() && steps.diff.outputs.has_changes == 'true'
        run: cat review.md || echo "No review file"

# .github/workflows/smart-audit-dates.yml
name: Smart Date Audit - Last 3 Days (Check Real Publication Dates)
on:
  workflow_dispatch:
    inputs:
      max_entries:
        description: 'Maximum entries to check (default: 50)'
        required: false
        default: '50'
        type: string
      auto_clean:
        description: 'Automatically remove entries with wrong dates'
        required: false
        default: 'false'
        type: boolean

jobs:
  smart-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
        
    - name: Create smart audit script
      run: |
        cat > smart-audit-dates.js << 'EOF'
        import fs from 'fs/promises';
        import fetch from 'node-fetch';

        console.log('üîç SMART DATE AUDIT - LAST 3 DAYS');
        console.log('==================================\n');

        function extractDateFromHTML(html, url) {
          const datePatterns = [
            /"datePublished"\s*:\s*"([^"]+)"/i,
            /"published_time"\s*:\s*"([^"]+)"/i,
            /<meta[^>]+property="article:published_time"[^>]+content="([^"]+)"/i,
            /<meta[^>]+name="publish-date"[^>]+content="([^"]+)"/i,
            /<meta[^>]+name="date"[^>]+content="([^"]+)"/i,
            /<time[^>]+datetime="([^"]+)"/i,
            /Published[:\s]+([A-Za-z]+ \d{1,2},? \d{4})/i,
            /(\d{4}-\d{2}-\d{2})/,
            /teslarati\.com.*(\d{4}\/\d{2}\/\d{2})/i,
          ];

          for (const pattern of datePatterns) {
            const match = html.match(pattern);
            if (match) {
              try {
                const dateStr = match[1];
                const date = new Date(dateStr);
                if (!isNaN(date.getTime()) && date.getFullYear() > 2000 && date.getFullYear() < 2030) {
                  return date;
                }
              } catch (e) {
                continue;
              }
            }
          }
          
          const urlDateMatch = url.match(/\/(\d{4})\/(\d{2})\/(\d{2})\//);
          if (urlDateMatch) {
            try {
              const [, year, month, day] = urlDateMatch;
              const date = new Date(`${year}-${month}-${day}`);
              if (!isNaN(date.getTime())) {
                return date;
              }
            } catch (e) {}
          }
          
          return null;
        }

        function isSuspiciousDate(entry, todayStr) {
          const entryDateStr = entry.date;
          const addedDate = new Date(entry.added_at);
          const entryDate = new Date(entryDateStr);
          
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          const yesterdayStr = yesterday.toISOString().split('T')[0];
          
          if (entryDateStr === todayStr || entryDateStr === yesterdayStr) {
            return true;
          }
          
          const addedDateStr = addedDate.toISOString().split('T')[0];
          if (entryDateStr === addedDateStr) {
            return true;
          }
          
          const daysDiff = Math.abs((entryDate - addedDate) / (1000 * 60 * 60 * 24));
          if (daysDiff < 1) {
            return true;
          }
          
          return false;
        }

        async function checkRealPublicationDate(entry) {
          try {
            console.log(`  üìÑ Fetching: ${entry.source_url}`);
            
            const response = await fetch(entry.source_url, {
              headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
              },
              timeout: 10000
            });
            
            if (!response.ok) {
              return { error: `HTTP ${response.status}` };
            }
            
            const html = await response.text();
            const realDate = extractDateFromHTML(html, entry.source_url);
            
            if (realDate) {
              const entryDate = new Date(entry.date);
              const daysDiff = Math.abs((realDate - entryDate) / (1000 * 60 * 60 * 24));
              
              return {
                realDate: realDate.toISOString().split('T')[0],
                claimedDate: entry.date,
                daysDifference: Math.round(daysDiff),
                isWrong: daysDiff > 7,
                realYear: realDate.getFullYear()
              };
            }
            
            return { error: 'No date found in article' };
            
          } catch (error) {
            return { error: error.message };
          }
        }

        async function smartDateAudit() {
          try {
            console.log('üìÅ Loading master-tracker-log.json...');
            const masterData = await fs.readFile('master-tracker-log.json', 'utf8');
            const entries = JSON.parse(masterData);
            console.log(`Found ${entries.length} total entries\n`);

            const today = new Date();
            const todayStr = today.toISOString().split('T')[0];
            
            console.log('üîç Phase 1: Finding entries added in the last 3 days...');
            
            const threeDaysAgo = new Date();
            threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
            
            const recentEntries = entries.filter(entry => {
              const addedDate = new Date(entry.added_at);
              return addedDate >= threeDaysAgo;
            });
            
            console.log(`Found ${recentEntries.length} entries added in the last 3 days\n`);
            
            if (recentEntries.length === 0) {
              console.log('‚úÖ No recent entries found to audit.');
              return;
            }
            
            const maxToCheck = parseInt(process.env.MAX_ENTRIES || '50');
            const entriesToCheck = recentEntries.slice(0, maxToCheck);
            
            console.log(`üåê Phase 2: Checking real publication dates for ${entriesToCheck.length} entries...`);
            const results = [];
            
            for (let i = 0; i < entriesToCheck.length; i++) {
              const entry = entriesToCheck[i];
              console.log(`\n${i + 1}/${entriesToCheck.length}: Checking "${entry.title.substring(0, 50)}..."`);
              
              const result = await checkRealPublicationDate(entry);
              results.push({
                entry,
                ...result
              });
              
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            console.log('\nüìä SMART AUDIT RESULTS:');
            console.log('========================');
            
            const wrongDates = results.filter(r => r.isWrong);
            const oldArticles = results.filter(r => r.realYear && r.realYear < 2025);
            const errors = results.filter(r => r.error);
            
            console.log(`‚úÖ Entries checked: ${results.length}`);
            console.log(`‚ùå Wrong dates found: ${wrongDates.length}`);
            console.log(`üì∞ Old articles (pre-2025): ${oldArticles.length}`);
            console.log(`‚ö†Ô∏è  Could not verify: ${errors.length}\n`);
            
            if (wrongDates.length > 0) {
              console.log('üö® ENTRIES WITH WRONG DATES:');
              console.log('==============================');
              wrongDates.forEach((result, index) => {
                console.log(`${index + 1}. "${result.entry.title}"`);
                console.log(`   Claimed date: ${result.claimedDate}`);
                console.log(`   Real date: ${result.realDate}`);
                console.log(`   Difference: ${result.daysDifference} days`);
                console.log(`   Source: ${result.entry.source_url}`);
                console.log('');
              });
            }
            
            if (oldArticles.length > 0) {
              console.log('üì∞ OLD ARTICLES FOUND:');
              console.log('=======================');
              oldArticles.forEach((result, index) => {
                console.log(`${index + 1}. "${result.entry.title}"`);
                console.log(`   Real publication: ${result.realDate} (${result.realYear})`);
                console.log(`   Tracker claimed: ${result.claimedDate}`);
                console.log(`   Source: ${result.entry.source_url}`);
                console.log('');
              });
            }
            
            const entriesToRemove = [...new Set([...wrongDates, ...oldArticles])];
            
            if (entriesToRemove.length > 0) {
              console.log('üí° RECOMMENDATIONS:');
              console.log('====================');
              console.log(`Remove ${entriesToRemove.length} entries with incorrect dates`);
              
              const entryIdsToRemove = new Set(entriesToRemove.map(r => r.entry.id));
              const cleanedEntries = entries.filter(entry => !entryIdsToRemove.has(entry.id));
              
              await fs.writeFile('master-tracker-log.smart-cleaned.json', JSON.stringify(cleanedEntries, null, 2));
              console.log(`\n‚úÖ Created cleaned dataset with ${cleanedEntries.length} entries`);
              console.log('üìÅ Saved as: master-tracker-log.smart-cleaned.json');
              
              // Write summary for next step
              await fs.writeFile('audit-summary.txt', `${entriesToRemove.length}`);
            } else {
              await fs.writeFile('audit-summary.txt', '0');
            }
            
          } catch (error) {
            console.error('‚ùå Error during smart audit:', error.message);
            process.exit(1);
          }
        }

        smartDateAudit();
        EOF
        
    - name: Run smart audit
      env:
        MAX_ENTRIES: ${{ github.event.inputs.max_entries }}
      run: node smart-audit-dates.js
      
    - name: Apply cleaning if requested
      if: ${{ github.event.inputs.auto_clean == 'true' }}
      run: |
        if [ -f master-tracker-log.smart-cleaned.json ]; then
          echo "üßπ Applying smart cleaning..."
          cp master-tracker-log.smart-cleaned.json master-tracker-log.json
          mkdir -p public
          cp master-tracker-log.smart-cleaned.json public/master-tracker-log.json
          echo "‚úÖ Smart cleaned files updated"
        else
          echo "No cleaned file found - nothing to apply"
        fi
        
    - name: Commit cleaned files
      if: ${{ github.event.inputs.auto_clean == 'true' }}
      run: |
        if [ -f audit-summary.txt ]; then
          REMOVED_COUNT=$(cat audit-summary.txt)
          if [ "$REMOVED_COUNT" != "0" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action - Smart Date Audit"
            git add master-tracker-log.json public/master-tracker-log.json
            git commit -m "Smart audit: Remove $REMOVED_COUNT entries with incorrect publication dates"
            git push
            echo "‚úÖ Changes committed and pushed"
          else
            echo "No changes to commit"
          fi
        fi

# .github/workflows/process-manual-article.yml
name: Process Single Manual Article
on:
  workflow_dispatch:
    inputs:
      article_url:
        description: 'Article URL to process'
        required: true
        type: string
      submitted_by:
        description: 'Who submitted this article'
        required: false
        default: 'admin'
        type: string
  repository_dispatch:
    types: [process-manual-article]

jobs:
  process-article:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Extract article details
      id: extract_article
      run: |
        # Get URL from input or dispatch event
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          ARTICLE_URL="${{ github.event.client_payload.article_url }}"
          SUBMITTED_BY="${{ github.event.client_payload.submitted_by }}"
        else
          ARTICLE_URL="${{ github.event.inputs.article_url }}"
          SUBMITTED_BY="${{ github.event.inputs.submitted_by }}"
        fi
        
        echo "article_url=$ARTICLE_URL" >> $GITHUB_OUTPUT
        echo "submitted_by=$SUBMITTED_BY" >> $GITHUB_OUTPUT
        echo "Processing: $ARTICLE_URL"
        
    - name: Process single article
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ARTICLE_URL: ${{ steps.extract_article.outputs.article_url }}
        SUBMITTED_BY: ${{ steps.extract_article.outputs.submitted_by }}
      run: |
        cat > process-single-article.js << 'EOF'
        import fs from 'fs/promises';
        import fetch from 'node-fetch';

        console.log('üîÑ PROCESSING SINGLE MANUAL ARTICLE');
        console.log('===================================');
        
        const ARTICLE_URL = process.env.ARTICLE_URL;
        const SUBMITTED_BY = process.env.SUBMITTED_BY || 'admin';
        
        console.log(`üìé URL: ${ARTICLE_URL}`);
        console.log(`üë§ Submitted by: ${SUBMITTED_BY}\n`);

        // Generate simple ID
        function generateId() {
            return Date.now() + '-' + Math.random().toString(36).substr(2, 9);
        }

        // Check if source is verified
        function isVerifiedSource(url) {
            const verifiedDomains = [
                'reuters.com', 'ap.org', 'apnews.com', 'wsj.com', 'nytimes.com',
                'washingtonpost.com', 'usatoday.com', 'bbc.com', 'bbc.co.uk',
                'cnn.com', 'foxnews.com', 'nbcnews.com', 'abcnews.go.com', 
                'cbsnews.com', 'msnbc.com', 'npr.org', 'pbs.org', 'politico.com',
                'thehill.com', 'axios.com', 'bloomberg.com', 'cnbc.com', 'forbes.com',
                'propublica.org', 'courthousenews.com'
            ];
            
            try {
                const domain = new URL(url).hostname.toLowerCase();
                return verifiedDomains.some(verified => domain.includes(verified)) || domain.endsWith('.gov');
            } catch {
                return false;
            }
        }

        // Fetch article content
        async function fetchArticleContent(url) {
            try {
                console.log(`üìÑ Fetching content from: ${url}`);
                
                const response = await fetch(url, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (compatible; PoliticalTracker/1.0)'
                    },
                    timeout: 15000
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const html = await response.text();
                
                // Extract title, description, date
                const titleMatch = html.match(/<meta[^>]+property="og:title"[^>]+content="([^"]+)"/i) ||
                                 html.match(/<title[^>]*>([^<]+)<\/title>/i);
                const title = titleMatch ? titleMatch[1].trim() : `Article from ${new URL(url).hostname}`;
                
                const descMatch = html.match(/<meta[^>]+property="og:description"[^>]+content="([^"]+)"/i) ||
                                html.match(/<meta[^>]+name="description"[^>]+content="([^"]+)"/i);
                const description = descMatch ? descMatch[1].trim() : `Political article from ${new URL(url).hostname}`;
                
                const dateMatch = html.match(/<meta[^>]+property="article:published_time"[^>]+content="([^"]+)"/i) ||
                                html.match(/(\d{4}-\d{2}-\d{2})/);
                let articleDate = new Date().toISOString().split('T')[0];
                if (dateMatch) {
                    try {
                        articleDate = new Date(dateMatch[1]).toISOString().split('T')[0];
                    } catch {}
                }
                
                console.log(`‚úÖ Extracted: "${title.substring(0, 50)}..."`);
                return { title, description, date: articleDate };
                
            } catch (error) {
                console.error(`‚ùå Failed to fetch content: ${error.message}`);
                throw error;
            }
        }

        // Analyze with OpenAI
        async function analyzeArticle(title, description, url) {
            try {
                console.log('ü§ñ Analyzing with OpenAI...');
                
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o-mini',
                        messages: [
                            {
                                role: 'system',
                                content: 'You are a political accountability analyst. Analyze articles for Trump 2.0 Era political relevance.'
                            },
                            {
                                role: 'user',
                                content: `Analyze this article: Title: ${title}, Description: ${description}, URL: ${url}

Return ONLY valid JSON:
{
  "actor": "main person/organization (e.g. 'Donald Trump', 'DOJ')",
  "category": "Financial|Civil Liberties|Platform Manipulation|Government Oversight|Election Integrity|Corporate Ethics|Legal Proceedings",
  "severity": "low|medium|high",
  "verified": true|false
}`
                            }
                        ],
                        max_tokens: 300,
                        temperature: 0.3
                    })
                });

                if (!response.ok) {
                    console.warn('OpenAI API failed, using fallback');
                    return {
                        actor: 'Manual Submission',
                        category: 'Government Oversight',
                        severity: 'medium',
                        verified: isVerifiedSource(url)
                    };
                }

                const data = await response.json();
                const content = data.choices[0].message.content.trim();
                
                try {
                    const analysis = JSON.parse(content);
                    return {
                        actor: analysis.actor || 'Manual Submission',
                        category: analysis.category || 'Government Oversight',
                        severity: analysis.severity || 'medium',
                        verified: analysis.verified !== undefined ? analysis.verified : isVerifiedSource(url)
                    };
                } catch {
                    return {
                        actor: 'Manual Submission',
                        category: 'Government Oversight',
                        severity: 'medium',
                        verified: isVerifiedSource(url)
                    };
                }
                
            } catch (error) {
                console.warn(`AI analysis failed: ${error.message}`);
                return {
                    actor: 'Manual Submission',
                    category: 'Government Oversight',
                    severity: 'medium',
                    verified: isVerifiedSource(url)
                };
            }
        }

        async function processArticle() {
            try {
                // Fetch article content
                const content = await fetchArticleContent(ARTICLE_URL);
                
                // Analyze with AI
                const analysis = await analyzeArticle(content.title, content.description, ARTICLE_URL);
                
                // Create entry
                const entry = {
                    id: generateId(),
                    date: content.date,
                    actor: analysis.actor,
                    category: analysis.category,
                    title: content.title,
                    description: content.description,
                    source_url: ARTICLE_URL,
                    verified: analysis.verified,
                    severity: analysis.severity,
                    added_at: new Date().toISOString(),
                    manual_submission: true,
                    submitted_by: SUBMITTED_BY,
                    processed_at: new Date().toISOString()
                };
                
                // Load existing entries
                let existingEntries = [];
                try {
                    const masterData = await fs.readFile('master-tracker-log.json', 'utf8');
                    existingEntries = JSON.parse(masterData);
                } catch (error) {
                    console.log('No existing entries found, creating new tracker');
                }
                
                // Add new entry and sort
                existingEntries.unshift(entry); // Add to beginning
                existingEntries.sort((a, b) => {
                    const dateCompare = (b.date || '').localeCompare(a.date || '');
                    if (dateCompare !== 0) return dateCompare;
                    return (b.added_at || '').localeCompare(a.added_at || '');
                });
                
                // Save updated tracker
                await fs.writeFile('master-tracker-log.json', JSON.stringify(existingEntries, null, 2));
                
                console.log('‚úÖ SUCCESS: Article processed and added to tracker');
                console.log(`üìä Total entries in tracker: ${existingEntries.length}`);
                
            } catch (error) {
                console.error('‚ùå FAILED to process article:', error.message);
                process.exit(1);
            }
        }

        processArticle();
        EOF
        
        node process-single-article.js
        
    - name: Copy to public folder
      run: |
        mkdir -p public
        cp master-tracker-log.json public/master-tracker-log.json
        
    - name: Commit processed article
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Article Processor"
        git pull origin main
        git add master-tracker-log.json public/master-tracker-log.json
        git commit -m "Add manually submitted article: ${{ steps.extract_article.outputs.article_url }}" || echo "No changes to commit"
        git push
        
    - name: Summary
      run: |
        echo "‚úÖ Successfully processed manual article submission"
        echo "üìé URL: ${{ steps.extract_article.outputs.article_url }}"
        echo "üë§ Submitted by: ${{ steps.extract_article.outputs.submitted_by }}"

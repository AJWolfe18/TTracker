name: RSS E2E Test (Production-Ready)

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "Environment to test"
        required: true
        default: "test"
        type: choice
        options: [test]  # Only test for now

permissions:
  contents: read

concurrency:
  group: rss-e2e-${{ github.event.inputs.target_env }}
  cancel-in-progress: false

jobs:
  seed-test-feeds:
    name: Seed RSS Feeds
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_env }}
    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          ref: test
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Seed RSS feeds in registry
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
        run: node scripts/seed-feeds-ci.js

  verify-rpcs:
    name: Verify Atomic RPCs
    needs: [seed-test-feeds]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_env }}
    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          ref: test
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify atomic RPCs exist
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
        run: node scripts/verify-atomic-rpcs.js

  run-rss-e2e-test:
    name: Run RSS End-to-End Test
    needs: [verify-rpcs]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_env }}
    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          ref: test
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create RSS fetch jobs
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
        run: node scripts/seed-fetch-jobs.js
      
      - name: Check for runnable jobs
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
        run: |
          echo "üîç Checking for runnable jobs..."
          node -e "const {createClient} = require('@supabase/supabase-js'); const s = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); s.from('job_queue').select('id').eq('job_type', 'fetch_feed').eq('status', 'pending').then(r => { console.log('Found', r.data?.length || 0, 'pending fetch_feed jobs'); process.exit(r.data?.length > 0 ? 0 : 1); });"
      
      - name: Process RSS jobs with atomic worker
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WORKER_POLL_INTERVAL_MS: "2000"
          WORKER_MAX_CONCURRENT: "3"
          MAX_EMPTY_POLLS: "30"  # Exit after 30 empty polls (~1 minute)
        run: |
          echo "üîÑ Processing RSS feed jobs..."
          # Simple: just run the script that's been created
          node scripts/run-worker.js || echo "Worker exited"
      
      - name: Verify articles were created
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY }}
        run: node scripts/verify-e2e-results.js
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report
          path: e2e-test-report.json
          retention-days: 7

  report-status:
    name: Report Test Status
    needs: [run-rss-e2e-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-report
      
      - name: Display results
        run: |
          if [ -f "e2e-test-report.json" ]; then
            echo "üìä E2E Test Report:"
            cat e2e-test-report.json | jq '.'
            
            # Check if test passed
            if jq -e '.success' e2e-test-report.json > /dev/null; then
              echo "‚úÖ RSS E2E Test PASSED"
              exit 0
            else
              echo "‚ùå RSS E2E Test FAILED"
              exit 1
            fi
          else
            echo "‚ùå No test report found"
            exit 1
          fi
